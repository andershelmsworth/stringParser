Microsoft (R) Macro Assembler Version 14.24.28315.0	    06/07/20 19:04:36
7Strings to Signed Integers     (program6_933958778.asm	     Page 1 - 1


				TITLE Strings to Signed Integers     (program6_933958778.asm)

				; Author: Andrew Helmsworth
				; Last Modified: 2020/06/01
				; OSU email address: helmswoa@oregonstate.edu
				; Course number/section: 271-400
				; Project Number: 6                Due Date: 2020/06/07
				; Description: Macros are defined which use Irvine Library 
				; procedures to read and write strings. These macros are used
				; by writeVal and readVal to get signed numbers from the user,
				; read it as a string, validate input, convert it to a signed integer
				; and store in an array. The sum and average are calculated and written
				; back as strings.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)
				;--------------------------------------
				getString MACRO inputAddress, prompt
				;   Prompts user to input an integer,
				;	then stores as a string.
				;
				;	Preconditions: Do not use any of the 
				;	general purpose registers as arguments
				;
				;	Receives: Address for saving input,
				;	address of a prompt for the user
				;
				;	Returns: A saved string at the input address
				;
				;
				;--------------------------------------

					;Save the registers
					pushad

					;Prompt for user input
					displayString prompt

					;Get the input from the user
					mov		edx, inputAddress
					mov		ecx, 32; ensure always null-terminated
					call	ReadString

					;Restore the registers
					popad
				ENDM

				;--------------------------------------
				displayString MACRO outputAddress
				;   Outputs a supplied string to screen.
				;
				;	Preconditions: Do not use any of the 
				;	general purpose registers as arguments
				;
				;	Receives: Address of string to output
				;
				;	Returns: none
				;
				;
				;--------------------------------------

					;Save the registers
					pushad

					;Prompt for user input
					mov		edx, outputAddress
					call	WriteString

					;Restore the registers
					popad
				ENDM

				; (insert constant definitions here)

 00000000			.data

				; (insert variable definitions here)
				;Variables for introducing the programmer & farewell
 00000000 53 74 72 69 6E	titleText	BYTE	"Strings to Signed Integers",0
	   67 73 20 74 6F
	   20 53 69 67 6E
	   65 64 20 49 6E
	   74 65 67 65 72
	   73 00
 0000001B 50 72 6F 67 72	authName	BYTE	"Programmed by Andrew Helmsworth",0
	   61 6D 6D 65 64
	   20 62 79 20 41
	   6E 64 72 65 77
	   20 48 65 6C 6D
	   73 77 6F 72 74
	   68 00
 0000003B 54 68 61 6E 6B	seeya		BYTE	"Thanks for stopping by, and have a nice day!",0
	   73 20 66 6F 72
	   20 73 74 6F 70
	   70 69 6E 67 20
	   62 79 2C 20 61
	   6E 64 20 68 61
	   76 65 20 61 20
	   6E 69 63 65 20
	   64 61 79 21 00

				;Variables for explaining EC
 00000068 2A 2A 45 43 3A	ecOne		BYTE	"**EC: Line numbers and a running subtotal are displayed.",0
	   20 4C 69 6E 65
	   20 6E 75 6D 62
	   65 72 73 20 61
	   6E 64 20 61 20
	   72 75 6E 6E 69
	   6E 67 20 73 75
	   62 74 6F 74 61
	   6C 20 61 72 65
	   20 64 69 73 70
	   6C 61 79 65 64
	   2E 00

				;Variables used for program description
 000000A1 54 68 69 73 20	descripA	BYTE	"This program will prompt you for 10 signed integers, validating your input.",0dh, 0ah, 0
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 70 72
	   6F 6D 70 74 20
	   79 6F 75 20 66
	   6F 72 20 31 30
	   20 73 69 67 6E
	   65 64 20 69 6E
	   74 65 67 65 72
	   73 2C 20 76 61
	   6C 69 64 61 74
	   69 6E 67 20 79
	   6F 75 72 20 69
	   6E 70 75 74 2E
	   0D 0A 00
 000000EF 49 6E 74 65 67	descripB	BYTE	"Integers must be appropriately sized for a 32-bit register.",0dh, 0ah, 0
	   65 72 73 20 6D
	   75 73 74 20 62
	   65 20 61 70 70
	   72 6F 70 72 69
	   61 74 65 6C 79
	   20 73 69 7A 65
	   64 20 66 6F 72
	   20 61 20 33 32
	   2D 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 0D
	   0A 00
 0000012D 41 66 74 65 72	descripC	BYTE	"After valid input is received, a list of the entered numbers, their sum, and average will be displayed.",0
	   20 76 61 6C 69
	   64 20 69 6E 70
	   75 74 20 69 73
	   20 72 65 63 65
	   69 76 65 64 2C
	   20 61 20 6C 69
	   73 74 20 6F 66
	   20 74 68 65 20
	   65 6E 74 65 72
	   65 64 20 6E 75
	   6D 62 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 61 76 65
	   72 61 67 65 20
	   77 69 6C 6C 20
	   62 65 20 64 69
	   73 70 6C 61 79
	   65 64 2E 00

				;Variables for prompting for user input
 00000195 50 6C 65 61 73	plsEnter	BYTE	"Please enter a signed integer: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 3A
	   20 00
 000001B5 45 72 72 6F 72	tryAgain	BYTE	"Error! You didn't enter a signed int, or you overflowed the register.",0dh, 0ah
	   21 20 59 6F 75
	   20 64 69 64 6E
	   27 74 20 65 6E
	   74 65 72 20 61
	   20 73 69 67 6E
	   65 64 20 69 6E
	   74 2C 20 6F 72
	   20 79 6F 75 20
	   6F 76 65 72 66
	   6C 6F 77 65 64
	   20 74 68 65 20
	   72 65 67 69 73
	   74 65 72 2E 0D
	   0A
 000001FC  50 6C 65 61 73				BYTE	"Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00

				;Variables for storing user input
 0000020F  00000021 [		userInput	BYTE	33 DUP(0)
	    00
	   ]
 00000230 00000000		validInt	DWORD	?
 00000234 00000000		isNeg		DWORD	0
 00000238 2D			minus		BYTE	"-"
 00000239 2B			plus		BYTE	"+"
 0000023A  00000021 [		emptyStr	BYTE	33 DUP(0)
	    00
	   ]
 0000025B  0000000A [		intArray	SDWORD	10 DUP(?)
	    00000000
	   ]
 00000283 0000000A		arrayCount	DWORD	10

				;Variables for clearing strings
 00000287 00			zero		BYTE	0
 00000288 00000021		thirtyThree	DWORD	33

				;Variables for writing values
 0000028C  00000021 [		intOutput	BYTE	33 DUP(0)
	    00
	   ]
 000002AD 00000000		currentInt	DWORD	?
 000002B1  00000021 [		tempString	BYTE	33 DUP(0)
	    00
	   ]
 000002D2 00000000		digits		DWORD	?

 00000000			.code
				;--------------------------------------
 00000000			main PROC
				;
				; Parses user input as a string to an int, prints sum and average
				; and validates input
				;
				; Preconditions: none
				; Postconditions: Input prompts, sum, average output to screen
				; Receives: none
				; Registers changed: esp
				; Registers changed (through called procs):
				; eax, ebx, ecx, edx, esi, edi, esp, ebp
				;
				; Returns: none
				;
				;--------------------------------------
					;push all registers
 00000000  60				pushad

					;Used for error detection
 00000001  6A 2F			push	47
				;--------------------------------------
				;INTRODUCTION SECTION
				;introduction
				;
				;This section of the program
				;introduces the programmer and
				;title.
				;--------------------------------------
					;Push string offsets in reverse order
					;as they are needed in introduction
 00000003  68 0000012D R		push	OFFSET descripC
 00000008  68 000000EF R		push	OFFSET descripB
 0000000D  68 000000A1 R		push	OFFSET descripA
 00000012  68 00000068 R		push	OFFSET ecOne
 00000017  68 0000001B R		push	OFFSET authName
 0000001C  68 00000000 R		push	OFFSET titleText

					;Introduce the program
 00000021  E8 0000007C			call	introduction
 00000026  E8 00000000 E		call	CrLf

				;--------------------------------------
				;GET USER INPUT SECTION
				;getUserInput
				;
				;This section of the program gets 10
				;valid integers from the user.
				;--------------------------------------

					;Push user input offsets in the reverse
					;order that they are needed in the proc
 0000002B  68 00000288 R		push	OFFSET thirtyThree
 00000030  68 00000283 R		push	OFFSET arrayCount
 00000035  68 0000025B R		push	OFFSET intArray
 0000003A  68 0000023A R		push	OFFSET emptyStr
 0000003F  68 00000238 R		push	OFFSET minus
 00000044  68 00000239 R		push	OFFSET plus
 00000049  68 00000234 R		push	OFFSET isNeg
 0000004E  68 00000230 R		push	OFFSET validInt
 00000053  68 0000020F R		push	OFFSET userInput
 00000058  68 000001B5 R		push	OFFSET tryAgain
 0000005D  68 00000195 R		push	OFFSET plsEnter

					;Get 10 values
					;call	getNumbers
					;call	CrLf

 00000062  E8 00000125			call	readVal
 00000067  68 00000238 R		push	OFFSET minus
 0000006C  68 000002D2 R		push	OFFSET digits
 00000071  68 00000288 R		push	OFFSET thirtyThree
 00000076  68 000002B1 R		push	OFFSET tempString
 0000007B  68 000002AD R		push	OFFSET currentInt
 00000080  68 00000230 R		push	OFFSET validInt
 00000085  68 0000028C R		push	OFFSET intOutput
 0000008A  E8 0000029A			call	writeVal
				;--------------------------------------
				;FAREWELL SECTION
				;farewell
				;
				;This section of the program bids farewell
				;to the user.
				;--------------------------------------
					;push string address and call
					;push	OFFSET seeya
					;call	farewell

					;Used for error detection
 0000008F  58				pop		eax
 00000090  E8 00000000 E		call	WriteDec
 00000095  E8 00000000 E		call	CrLf

					;returh registers
 0000009A  61				popad

					exit	; exit to operating system
 0000009B  6A 00	   *	    push   +000000000h
 0000009D  E8 00000000 E   *	    call   ExitProcess
 000000A2			main ENDP

				; (insert additional procedures here)
				;--------------------------------------
 000000A2			introduction PROC
				;
				; Introduces program title and name
				; of programmer, as well as extra credit
				; option and description.
				;
				; Preconditions: Title, author, EC string, description strings,
				; on stack
				; Postconditions: Introduction and related strings output to screen
				; Receives: Title, author, EC string, description strings,
				; on stack
				; Registers changed: eax, ecx, edx, ebp, esp, esi
				;
				; Returns: none
				;
				;--------------------------------------

					;Save ebp and set the base pointer
 000000A2  55				push	ebp
 000000A3  8B EC			mov		ebp, esp

					;Saving registers
 000000A5  60				pushad

				;--------------------------------------
				; CITATION: Concept learned from reference:
				; https://piazza.com/class/k83uhw9nnyd2y9?cid=278
				;--------------------------------------
				;; STACK FRAME CONTENTS
				;
				;registers	|	ebp--
				;old ebp	|	ebp <-(Also esp)
				;return @	|	ebp + 4
				;titleText	|	ebp + 8
				;authName	|	ebp + 12
				;ecOne		|	ebp + 16
				;descripA	|	ebp + 20
				;descripB	|	ebp + 24
				;descripC	|	ebp + 28
				;--------------------------------------
					;Introduce title
					displayString [ebp + 8]
 000000A6  60		     1		pushad
 000000A7  8B 55 08	     1		mov		edx, [ebp + 8]
 000000AA  E8 00000000 E     1		call	WriteString
 000000AF  61		     1		popad
 000000B0  E8 00000000 E		call	CrLf

					;Introduce programmer
					displayString [ebp + 12]
 000000B5  60		     1		pushad
 000000B6  8B 55 0C	     1		mov		edx, [ebp + 12]
 000000B9  E8 00000000 E     1		call	WriteString
 000000BE  61		     1		popad
 000000BF  E8 00000000 E		call	CrLf

					;Specify EC option
					displayString [ebp + 16]
 000000C4  60		     1		pushad
 000000C5  8B 55 10	     1		mov		edx, [ebp + 16]
 000000C8  E8 00000000 E     1		call	WriteString
 000000CD  61		     1		popad
 000000CE  E8 00000000 E		call	CrLf

					;List program description
					displayString [ebp + 20]
 000000D3  60		     1		pushad
 000000D4  8B 55 14	     1		mov		edx, [ebp + 20]
 000000D7  E8 00000000 E     1		call	WriteString
 000000DC  61		     1		popad
					displayString [ebp + 24]
 000000DD  60		     1		pushad
 000000DE  8B 55 18	     1		mov		edx, [ebp + 24]
 000000E1  E8 00000000 E     1		call	WriteString
 000000E6  61		     1		popad
					displayString [ebp + 28]
 000000E7  60		     1		pushad
 000000E8  8B 55 1C	     1		mov		edx, [ebp + 28]
 000000EB  E8 00000000 E     1		call	WriteString
 000000F0  61		     1		popad
 000000F1  E8 00000000 E		call	CrLf

					;return registers
 000000F6  61				popad

					;Reset ebp -- esp never moved
 000000F7  5D				pop		ebp

					;Return but also clear stack
 000000F8  C2 0018			ret		24

 000000FB			introduction ENDP

				;--------------------------------------
 000000FB			getNumbers PROC
				;
				; Stores 10 valid ints from the user

				; Preconditions: large stack, see stack contents below
				; Postconditions: valid integer in validInt
				; Receives: large stack, see stack contents below
				; Registers changed: eax, ebx, ecx, edx, ebp, esp, esi
				;
				; Returns: valid integers in intArray
				;
				;--------------------------------------

					;Save ebp and set the base pointer
 000000FB  55				push	ebp
 000000FC  8B EC			mov		ebp, esp

					;save registers
 000000FE  60				pushad

				;--------------------------------------
				; CITATION: Concept learned from reference:
				; https://piazza.com/class/k83uhw9nnyd2y9?cid=278
				;--------------------------------------
				;; STACK FRAME CONTENTS
				; 
				;old ebp	|	ebp <-(Also esp)
				;return @	|	ebp + 4
				;plsEnter	|	ebp + 8
				;tryAgain	|	ebp + 12
				;userInput	|	ebp + 16
				;validInt	|	ebp + 20
				;isNeg		|	ebp + 24
				;plus		|	ebp + 28
				;minus		|	ebp + 32
				;emptyStr	|	ebp + 36
				;intArray	|	ebp + 40
				;arrayCount	|	ebp + 44
				;thirtyThree|	ebp + 48
				;--------------------------------------
					;initialize counter and edi
 000000FF  8B 5D 2C			mov		ebx, [ebp + 44]
 00000102  B8 0000000A			mov		eax, 10
 00000107  89 03			mov		[ebx], eax

 00000109			getMore:
					;push values for readVal
 00000109  FF 75 30			push	[ebp + 48]
 0000010C  FF 75 2C			push	[ebp + 44]
 0000010F  FF 75 28			push	[ebp + 40]
 00000112  FF 75 24			push	[ebp + 36]
 00000115  FF 75 20			push	[ebp + 32]
 00000118  FF 75 1C			push	[ebp + 28]
 0000011B  FF 75 18			push	[ebp + 24]
 0000011E  FF 75 14			push	[ebp + 20]
 00000121  FF 75 10			push	[ebp + 16]
 00000124  FF 75 0C			push	[ebp + 12]
 00000127  FF 75 08			push	[ebp + 8]

					;Get next value
 0000012A  E8 0000005D			call	readVal

					;Clear the input string
 0000012F  FF 75 30			push	[ebp + 48]
 00000132  FF 75 10			push	[ebp + 16]
 00000135  E8 000001D9			call	clearString

					;get validInt
 0000013A  8B 75 14			mov		esi, [ebp + 20]

					;save to array and increment
					;subtract arrayCount from 10
 0000013D  B8 0000000A			mov		eax, 10
 00000142  8B 7D 2C			mov		edi, [ebp + 44]
 00000145  2B 07			sub		eax, [edi]
 00000147  BB 00000004			mov		ebx, 4

					;multiply by four
 0000014C  F7 E3			mul		ebx
 0000014E  8B 7D 28			mov		edi, [ebp + 40]

					;add this offset to edi
 00000151  03 F8			add		edi, eax
 00000153  8B 75 14			mov		esi, [ebp + 20]
 00000156  8B 06			mov		eax, [esi]

					;save valid int
 00000158  89 07			mov		[edi], eax

					;continue to fill array
 0000015A  8B 5D 2C			mov		ebx, [ebp + 44]
 0000015D  B8 00000001			mov		eax, 1
 00000162  29 03			sub		[ebx], eax; sub 1 from arrayCount
 00000164  B8 00000000			mov		eax, 0
 00000169  39 03			cmp		[ebx], eax
 0000016B  75 9C			jnz		getMore

 0000016D  B9 0000000A			mov		ecx, 10
 00000172  8B 75 28			mov		esi, [ebp + 40]
 00000175			printEm:
					;Write the integers in array
 00000175  8B 06			mov		eax, [esi]
 00000177  50				push	eax
 00000178  E8 000001AC			call	writeVal
 0000017D  83 C6 04			add		esi, 4
 00000180  E8 00000000 E		call	CrLf
 00000185  E2 EE			loop	printEm

					;return registers
 00000187  61				popad

					;return ebp to initial value
 00000188  5D				pop		ebp

 00000189  C2 002C			ret 44
 0000018C			getNumbers ENDP

				;--------------------------------------
 0000018C			readVal PROC
				;
				; Gets and validates a signed integer from the user.
				;
				; Preconditions: userInput, validInt on stack
				; Postconditions: valid integer in validInt
				; Receives: userInput string on stack
				; Registers changed: eax, ecx, edx, ebp, esp, esi
				;
				; Returns: valid integer in validInt
				;
				;--------------------------------------

					;Save ebp and set the base pointer
 0000018C  55				push	ebp
 0000018D  8B EC			mov		ebp, esp

					;save registers
 0000018F  60				pushad

				;--------------------------------------
				; CITATION: Concept learned from reference:
				; https://piazza.com/class/k83uhw9nnyd2y9?cid=278
				;--------------------------------------
				;; STACK FRAME CONTENTS
				;
				;registers	|	ebp--
				;old ebp	|	ebp
				;ret@		|	ebp + 4
				;plsEnter	|	ebp + 8 
				;tryAgain	|	ebp + 12
				;userInput	|	ebp + 16
				;validInt	|	ebp + 20
				;isNeg		|	ebp + 24
				;plus		|	ebp + 28
				;minus		|	ebp + 32
				;emptyStr	|	ebp + 36
				;intArray	|	ebp + 40
				;arrayCount	|	ebp + 44
				;thirtyThree|	ebp + 48
				;--------------------------------------
					;Skip over invalid unless jumped to
 00000190  EB 3B			jmp		initRead

 00000192			invalidEntry:	
					;Input was invalid
					;Clear the input string
 00000192  FF 75 30			push	[ebp + 48]
 00000195  FF 75 10			push	[ebp + 16]
 00000198  E8 00000176			call	clearString

					;Initialize validInt, isNeg, clear direction
 0000019D  8B 7D 14			mov		edi, [ebp + 20];validInt
 000001A0  B8 00000000			mov		eax, 0
 000001A5  89 07			mov		[edi], eax
 000001A7  8B 7D 18			mov		edi, [ebp + 24];isNeg
 000001AA  89 07			mov		[edi], eax
 000001AC  FC				cld

					;Get input from user
					getString [ebp + 16], [ebp + 12];userInput, tryAgain
 000001AD  60		     1		pushad
 000001AE  60		     2		pushad
 000001AF  8B 55 0C	     2		mov		edx, [ebp + 12]
 000001B2  E8 00000000 E     2		call	WriteString
 000001B7  61		     2		popad
 000001B8  8B 55 10	     1		mov		edx, [ebp + 16]
 000001BB  B9 00000020	     1		mov		ecx, 32; ensure always null-terminated
 000001C0  E8 00000000 E     1		call	ReadString
 000001C5  61		     1		popad
 000001C6  E8 00000000 E		call	CrLf

					;skip inital prompt
 000001CB  EB 2E			jmp		firstByte

 000001CD			initRead:
					;Get input from user
					getString [ebp + 16], [ebp + 8];userInput, plsEnter
 000001CD  60		     1		pushad
 000001CE  60		     2		pushad
 000001CF  8B 55 08	     2		mov		edx, [ebp + 8]
 000001D2  E8 00000000 E     2		call	WriteString
 000001D7  61		     2		popad
 000001D8  8B 55 10	     1		mov		edx, [ebp + 16]
 000001DB  B9 00000020	     1		mov		ecx, 32; ensure always null-terminated
 000001E0  E8 00000000 E     1		call	ReadString
 000001E5  61		     1		popad
 000001E6  E8 00000000 E		call	CrLf
					
					;Initialize validInt, isNeg, clear direction
 000001EB  B8 00000000			mov		eax, 0
 000001F0  8B 7D 14			mov		edi, [ebp + 20];validInt
 000001F3  89 07			mov		[edi], eax
 000001F5  8B 7D 18			mov		edi, [ebp + 24];isNeg
 000001F8  89 07			mov		[edi], eax
 000001FA  FC				cld

 000001FB			firstByte:
					;Set esi, direction, reinit isNeg
 000001FB  8B 75 10			mov		esi, [ebp + 16];esi set to userInput@
 000001FE  B8 00000000			mov		eax, 0
 00000203  8B 7D 18			mov		edi, [ebp + 24];isNeg
 00000206  89 07			mov		[edi], eax;isNeg set to zero

					;Get the first byte, zero-extend
 00000208  AC				lodsb
 00000209  0F B6 C0			movzx	eax, al

					;Check to see if it's a negative sign
 0000020C  83 F8 2D			cmp		eax, 45
 0000020F  74 21			jz		negFound

					;Check to see if it's a positive sign
 00000211  83 F8 2B			cmp		eax, 43
 00000214  74 28			jz		posFound

					;No sign, checking this byte in range
 00000216  83 E8 30			sub		eax, 48
 00000219  83 F8 00			cmp		eax, 0; lower than zero?
 0000021C  0F 82 FFFFFF70		jb		invalidEntry
 00000222  83 F8 09			cmp		eax, 9;greater than 9?
 00000225  0F 87 FFFFFF67		ja		invalidEntry

					;Was a digit, proceeding
 0000022B  8B 7D 14			mov		edi, [ebp + 20];validInt
 0000022E  01 07			add		[edi], eax;first digit stored in validInt
 00000230  EB 18			jmp		keepReading

 00000232			negFound:
					;set boolean and continue
 00000232  8B 7D 18			mov		edi, [ebp + 24];isNeg
 00000235  B8 00000001			mov		eax, 1
 0000023A  89 07			mov		[edi], eax;isNeg set to 1
 0000023C  EB 0C			jmp		keepReading

 0000023E			posFound:
					;set boolean and continue
 0000023E  8B 7D 18			mov		edi, [ebp + 24];isNeg
 00000241  B8 00000000			mov		eax, 0
 00000246  89 07			mov		[edi], eax;isNeg set to 0
 00000248  EB 00			jmp		keepReading

 0000024A			keepReading:
					;Check next byte before loading
 0000024A  8A 0E			mov		cl, [esi]
 0000024C  80 F9 00			cmp		cl, 0
 0000024F  0F 84 00000094		jz		endRead

					;Multiply to next dec place
 00000255  BB 0000000A			mov		ebx, 10
 0000025A  8B 7D 14			mov		edi, [ebp + 20];validInt
 0000025D  8B 07			mov		eax, [edi];validInt literal in eax
 0000025F  F7 D8			neg		eax;doing inverse first
 00000261  F7 EB			imul		ebx;validInt * 10
 00000263  0F 80 FFFFFF29		jo		invalidEntry
 00000269  F7 D8			neg		eax;back to positive

					;check overflow flag
 0000026B  F7 D8			neg		eax;is negative
 0000026D  23 C0			and		eax, eax
 0000026F  0F 80 FFFFFF1D		jo		invalidEntry

					;Wasn't enough to overflow, renagting
 00000275  F7 D8			neg		eax;back to positive
					;and		eax, eax
					;jo		invalidEntry
 00000277  89 07			mov		[edi], eax;storing new *10'd int in validInt

					;get the next byte, zero-extend
 00000279  AC				lodsb
 0000027A  0F B6 C0			movzx	eax, al

					;checking this byte in range
 0000027D  83 E8 30			sub		eax, 48
 00000280  83 F8 00			cmp		eax, 0; lower than zero?
 00000283  0F 82 FFFFFF09		jb		invalidEntry
 00000289  83 F8 09			cmp		eax, 9;greater than 9?
 0000028C  0F 87 FFFFFF00		ja		invalidEntry

					;Is a digit, adding to running total
 00000292  8B 7D 14			mov		edi, [ebp + 20];validInt
 00000295  8B 1F			mov		ebx, [edi];validInt literal in ebx
 00000297  F7 DB			neg		ebx;going for inverse first
 00000299  23 DB			and		ebx, ebx
 0000029B  0F 80 FFFFFEF1		jo		invalidEntry
 000002A1  2B D8			sub		ebx, eax;subbing new digit from validInt

					;checking overflow
 000002A3  0F 80 FFFFFEE9		jo		invalidEntry
 000002A9  23 DB			and		ebx, ebx
 000002AB  0F 80 FFFFFEE1		jo		invalidEntry

					;checking sign boolean
 000002B1  8B 7D 18			mov		edi, [ebp + 24]
 000002B4  8B 0F			mov		ecx, [edi]
 000002B6  83 F9 00			cmp		ecx, 0
 000002B9  74 02			jz		posOverflow
 000002BB  EB 12			jmp		noOverflow

 000002BD			posOverflow:
					;checking if its 2147483648
 000002BD  83 EB 01			sub		ebx, 1
 000002C0  0F 80 FFFFFECC		jo		invalidEntry
 000002C6  83 C3 01			add		ebx, 1
 000002C9  0F 80 FFFFFEC3		jo		invalidEntry

 000002CF			noOverflow:
					;didn't overflow, saving
 000002CF  F7 DB			neg		ebx;returning to pos
 000002D1  0F 80 FFFFFEBB		jo		invalidEntry
 000002D7  23 DB			and		ebx, ebx
 000002D9  0F 80 FFFFFEB3		jo		invalidEntry
 000002DF  8B 7D 14			mov		edi, [ebp + 20];validInt
 000002E2  89 1F			mov		[edi], ebx;storing new total in validInt

					;continue
 000002E4  E9 FFFFFF61			jmp		keepReading
					
 000002E9			endRead:
					;Valid int is now saved in validInt
					;now we need to check sign
 000002E9  8B 7D 18			mov		edi, [ebp + 24];isNeg
 000002EC  B8 00000001			mov		eax, 1
 000002F1  39 07			cmp		[edi], eax;compare isNeg to 1
 000002F3  74 02			jz		complement
 000002F5  EB 17			jmp		endReadVal

 000002F7			complement:
					;get two's complement of validInt
 000002F7  8B 7D 14			mov		edi, [ebp + 20];validInt
 000002FA  8B 07			mov		eax, [edi];validInt is in eax
 000002FC  F7 D8			neg		eax;negated integer is in eax
 000002FE  0F 80 FFFFFE8E		jo		invalidEntry
 00000304  23 C0			and		eax, eax
 00000306  0F 80 FFFFFE86		jo		invalidEntry
 0000030C  89 07			mov		[edi], eax;negated integer is in validInt

 0000030E			endReadVal:
					;reset ebp, registers and clean stack for next proc
 0000030E  61				popad
 0000030F  5D				pop		ebp
 00000310  C2 002C			ret 44
 00000313			readVal ENDP

				;--------------------------------------
 00000313			clearString PROC
				;
				; Blanks out the userInput string
				;
				; Preconditions: userInput, zero, thirtyThree on stack
				; Postconditions: userInput blanked out
				; Receives: userInput, zero, thirtyThree on stack
				; Registers changed: eax, ebx, ecx, edx, ebp, esp, esi
				;
				; Returns: none
				;
				;--------------------------------------

					;Save ebp and set the base pointer
 00000313  55				push	ebp
 00000314  8B EC			mov		ebp, esp

					;save registers
 00000316  60				pushad

				;--------------------------------------
				; CITATION: Concept learned from reference:
				; https://piazza.com/class/k83uhw9nnyd2y9?cid=278
				;--------------------------------------
				;; STACK FRAME CONTENTS
				;
				;registers	|	ebp--
				;old ebp	|	ebp
				;ret@		|	ebp + 4
				;userInput	|	ebp + 8
				;thirtyThree|	ebp + 12
				;--------------------------------------
					;init counter
 00000317  8B 75 0C			mov		esi, DWORD PTR [ebp + 12]
 0000031A  8B 0E			mov		ecx, [esi]

					;init edi
 0000031C  8B 7D 08			mov		edi, [ebp + 8]

 0000031F			keepBlanking:
					;blank out next spot in string
 0000031F  B0 00			mov		al, 0
 00000321  AA				stosb

					;continue if needed
 00000322  E2 FB			loop	keepBlanking

					;reset ebp, registers and clean stack for next proc
 00000324  61				popad
 00000325  5D				pop		ebp
 00000326  C2 0008			ret 8
 00000329			clearString ENDP

				;--------------------------------------
 00000329			writeVal PROC
				;
				; Converts an integer in memory to a string of digits,
				; then outputs that string to screen.
				;
				; Preconditions: intOutput on stack
				; Postconditions: string output to screen
				; Receives: intOutput on stack
				; Registers changed: eax, ecx, edx, ebp, esp, esi
				;
				; Returns: none
				;
				;--------------------------------------

					;Save ebp and set the base pointer
 00000329  55				push	ebp
 0000032A  8B EC			mov		ebp, esp

					;save registers
 0000032C  60				pushad

				;--------------------------------------
				; CITATION: Concept learned from reference:
				; https://piazza.com/class/k83uhw9nnyd2y9?cid=278
				;--------------------------------------
				;; STACK FRAME CONTENTS
				;
				;registers	|	ebp--
				;old ebp	|	ebp
				;ret@		|	ebp + 4
				;intOutput	|	ebp + 8 
				;validInt	|	ebp + 12
				;currentInt	|	ebp + 16
				;tempString	|	ebp + 20
				;thirtyThree|	ebp + 24
				;digits		|	ebp + 28
				;minus		|	ebp + 32
				;--------------------------------------
					;clear digits
 0000032D  8B 75 1C			mov		esi, [ebp + 28]
 00000330  B8 00000000			mov		eax, 0
 00000335  89 06			mov		[esi], eax

					;clear intOutput
 00000337  FF 75 18			push	[ebp + 24]
 0000033A  FF 75 08			push	[ebp + 8]
 0000033D  E8 FFFFFFD1			call	clearString

					;clear tempString
 00000342  FF 75 18			push	[ebp + 24]
 00000345  FF 75 14			push	[ebp + 20]
 00000348  E8 FFFFFFC6			call	clearString

					;copy validInt to currentInt
 0000034D  8B 7D 10			mov		edi, [ebp + 16]
 00000350  8B 75 0C			mov		esi, [ebp + 12]
 00000353  8B 06			mov		eax, [esi]
 00000355  89 07			mov		[edi], eax

					;init intOutput
 00000357  8B 7D 08			mov		edi, [ebp + 8]

					;check sign
 0000035A  8B 55 0C			mov		edx, [ebp + 12]
 0000035D  8B 02			mov		eax, [edx]
 0000035F  83 E8 00			sub		eax, 0
 00000362  78 02			js		checkSign
 00000364  EB 0A			jmp		keepDividing

 00000366			checkSign:
					;is negative, so negating
 00000366  F7 D8			neg		eax

					;storing in currentInt
 00000368  8B 7D 10			mov		edi, [ebp + 16]
 0000036B  89 07			mov		[edi], eax

					;init intOutput
 0000036D  8B 7D 08			mov		edi, [ebp + 8]

 00000370			keepDividing:
					;get currentInt, sign-extend
 00000370  8B 75 10			mov		esi, [ebp + 16]
 00000373  8B 06			mov		eax, [esi]
 00000375  99				cdq

					;divide by 10 move quotient to ecx and currentInt
 00000376  BB 0000000A			mov		ebx, 10
 0000037B  F7 F3			div		ebx
 0000037D  8B C8			mov		ecx, eax
 0000037F  89 06			mov		[esi], eax

					;remainder is in dl, saving to string
 00000381  B8 00000000			mov		eax, 0
 00000386  8A C2			mov		al, dl
 00000388  04 30			add		al, 48;adjust to ascii
 0000038A  FC				cld
 0000038B  AA				stosb

					;increment digits
 0000038C  8B 55 1C			mov		edx, [ebp + 28]
 0000038F  8B 1A			mov		ebx, [edx]
 00000391  83 C3 01			add		ebx, 1
 00000394  89 1A			mov		[edx], ebx

					;check if done
 00000396  83 F9 00			cmp		ecx, 0
 00000399  75 D5			jnz		keepDividing

					;Reverse string
 0000039B  8B C7			mov		eax, edi
 0000039D  8B 7D 14			mov		edi, [ebp + 20];tempString
 000003A0  8B F0			mov		esi, eax;intOutput end
 000003A2  83 EE 01			sub		esi, 1

					;check sign
 000003A5  8B 55 0C			mov		edx, [ebp + 12]
 000003A8  8B 02			mov		eax, [edx]
 000003AA  83 E8 00			sub		eax, 0
 000003AD  78 02			js		negOutput
 000003AF  EB 06			jmp		keepReversing

 000003B1			negOutput:
					;Store minus sign first
 000003B1  8B 55 20			mov		edx, [ebp + 32]
 000003B4  8B 02			mov		eax, [edx]
 000003B6  AA				stosb

 000003B7			keepReversing:
					;check end of string
 000003B7  8B 06			mov		eax, [esi]
 000003B9  83 F8 00			cmp		eax, 0
 000003BC  74 13			jz		doneReversing

					;not end of string, move from source to dest
 000003BE  FD				std;backwards from source
 000003BF  AC				lodsb
 000003C0  FC				cld;forwards from destination
 000003C1  AA				stosb

					;check to see if we're at the end
 000003C2  8B 55 1C			mov		edx, [ebp + 28]
 000003C5  8B 02			mov		eax, [edx]
 000003C7  83 E8 01			sub		eax, 1
 000003CA  89 02			mov		[edx], eax
 000003CC  83 F8 00			cmp		eax, 0
 000003CF  75 E6			jnz		keepReversing

 000003D1			doneReversing:
					;Done converting, time to display tempString
					displayString [ebp + 20]
 000003D1  60		     1		pushad
 000003D2  8B 55 14	     1		mov		edx, [ebp + 20]
 000003D5  E8 00000000 E     1		call	WriteString
 000003DA  61		     1		popad
 000003DB  E8 00000000 E		call	CrLf

					;used for error detection
					;mov		esi, [ebp + 12]
					;mov		eax, [esi]
					;call	WriteInt
					;call	CrLf

					;reset ebp, registers and clean stack for next proc
 000003E0  61				popad
 000003E1  5D				pop		ebp
 000003E2  C2 001C			ret 28
 000003E5			writeVal ENDP


				; (insert additional procedures here)

				END main
Microsoft (R) Macro Assembler Version 14.24.28315.0	    06/07/20 19:04:36
7Strings to Signed Integers     (program6_933958778.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

displayString  . . . . . . . . .	Proc
getString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002D6 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003E5 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
clearString  . . . . . . . . . .	P Near	 00000313 _TEXT	Length= 00000016 Public STDCALL
  keepBlanking . . . . . . . . .	L Near	 0000031F _TEXT	
getNumbers . . . . . . . . . . .	P Near	 000000FB _TEXT	Length= 00000091 Public STDCALL
  getMore  . . . . . . . . . . .	L Near	 00000109 _TEXT	
  printEm  . . . . . . . . . . .	L Near	 00000175 _TEXT	
introduction . . . . . . . . . .	P Near	 000000A2 _TEXT	Length= 00000059 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A2 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 0000018C _TEXT	Length= 00000187 Public STDCALL
  invalidEntry . . . . . . . . .	L Near	 00000192 _TEXT	
  initRead . . . . . . . . . . .	L Near	 000001CD _TEXT	
  firstByte  . . . . . . . . . .	L Near	 000001FB _TEXT	
  negFound . . . . . . . . . . .	L Near	 00000232 _TEXT	
  posFound . . . . . . . . . . .	L Near	 0000023E _TEXT	
  keepReading  . . . . . . . . .	L Near	 0000024A _TEXT	
  posOverflow  . . . . . . . . .	L Near	 000002BD _TEXT	
  noOverflow . . . . . . . . . .	L Near	 000002CF _TEXT	
  endRead  . . . . . . . . . . .	L Near	 000002E9 _TEXT	
  complement . . . . . . . . . .	L Near	 000002F7 _TEXT	
  endReadVal . . . . . . . . . .	L Near	 0000030E _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
writeVal . . . . . . . . . . . .	P Near	 00000329 _TEXT	Length= 000000BC Public STDCALL
  checkSign  . . . . . . . . . .	L Near	 00000366 _TEXT	
  keepDividing . . . . . . . . .	L Near	 00000370 _TEXT	
  negOutput  . . . . . . . . . .	L Near	 000003B1 _TEXT	
  keepReversing  . . . . . . . .	L Near	 000003B7 _TEXT	
  doneReversing  . . . . . . . .	L Near	 000003D1 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayCount . . . . . . . . . . .	DWord	 00000283 _DATA	
authName . . . . . . . . . . . .	Byte	 0000001B _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
currentInt . . . . . . . . . . .	DWord	 000002AD _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
descripA . . . . . . . . . . . .	Byte	 000000A1 _DATA	
descripB . . . . . . . . . . . .	Byte	 000000EF _DATA	
descripC . . . . . . . . . . . .	Byte	 0000012D _DATA	
digits . . . . . . . . . . . . .	DWord	 000002D2 _DATA	
ecOne  . . . . . . . . . . . . .	Byte	 00000068 _DATA	
emptyStr . . . . . . . . . . . .	Byte	 0000023A _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intArray . . . . . . . . . . . .	DWord	 0000025B _DATA	
intOutput  . . . . . . . . . . .	Byte	 0000028C _DATA	
isNeg  . . . . . . . . . . . . .	DWord	 00000234 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
minus  . . . . . . . . . . . . .	Byte	 00000238 _DATA	
plsEnter . . . . . . . . . . . .	Byte	 00000195 _DATA	
plus . . . . . . . . . . . . . .	Byte	 00000239 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
seeya  . . . . . . . . . . . . .	Byte	 0000003B _DATA	
tempString . . . . . . . . . . .	Byte	 000002B1 _DATA	
thirtyThree  . . . . . . . . . .	DWord	 00000288 _DATA	
titleText  . . . . . . . . . . .	Byte	 00000000 _DATA	
tryAgain . . . . . . . . . . . .	Byte	 000001B5 _DATA	
userInput  . . . . . . . . . . .	Byte	 0000020F _DATA	
validInt . . . . . . . . . . . .	DWord	 00000230 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
zero . . . . . . . . . . . . . .	Byte	 00000287 _DATA	

	   0 Warnings
	   0 Errors
