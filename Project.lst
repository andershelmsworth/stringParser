Microsoft (R) Macro Assembler Version 14.24.28315.0	    06/04/20 21:55:19
7Strings to Signed Integers     (program6_933958778.asm	     Page 1 - 1


				TITLE Strings to Signed Integers     (program6_933958778.asm)

				; Author: Andrew Helmsworth
				; Last Modified: 2020/06/01
				; OSU email address: helmswoa@oregonstate.edu
				; Course number/section: 271-400
				; Project Number: 6                Due Date: 2020/06/07
				; Description: Macros are defined which use Irvine Library 
				; procedures to read and write strings. These macros are used
				; by writeVal and readVal to get signed numbers from the user,
				; read it as a string, validate input, convert it to a signed integer
				; and store in an array. The sum and average are calculated and written
				; back as strings.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)
				;--------------------------------------
				getString MACRO inputAddress, prompt
				;   Prompts user to input an integer,
				;	then stores as a string.
				;
				;	Preconditions: Do not use any of the 
				;	general purpose registers as arguments
				;
				;	Receives: Address for saving input,
				;	address of a prompt for the user
				;
				;	Returns: A saved string at the input address
				;
				;
				;--------------------------------------

					;Save the registers
					pushad

					;Prompt for user input
					mov		edx, prompt
					call	WriteString

					;Get the input from the user
					mov		edx, inputAddress
					mov		ecx, 32; ensure always null-terminated
					call	ReadString

					;Restore the registers
					popad
				ENDM

				; (insert constant definitions here)

 00000000			.data

				; (insert variable definitions here)
				;Variables for introducing the programmer & farewell
 00000000 53 74 72 69 6E	titleText	BYTE	"Strings to Signed Integers",0
	   67 73 20 74 6F
	   20 53 69 67 6E
	   65 64 20 49 6E
	   74 65 67 65 72
	   73 00
 0000001B 50 72 6F 67 72	authName	BYTE	"Programmed by Andrew Helmsworth",0
	   61 6D 6D 65 64
	   20 62 79 20 41
	   6E 64 72 65 77
	   20 48 65 6C 6D
	   73 77 6F 72 74
	   68 00
 0000003B 54 68 61 6E 6B	seeya		BYTE	"Thanks for stopping by, and have a nice day!",0
	   73 20 66 6F 72
	   20 73 74 6F 70
	   70 69 6E 67 20
	   62 79 2C 20 61
	   6E 64 20 68 61
	   76 65 20 61 20
	   6E 69 63 65 20
	   64 61 79 21 00

				;Variables for explaining EC
 00000068 2A 2A 45 43 3A	ecOne		BYTE	"**EC: Line numbers and a running subtotal are displayed.",0
	   20 4C 69 6E 65
	   20 6E 75 6D 62
	   65 72 73 20 61
	   6E 64 20 61 20
	   72 75 6E 6E 69
	   6E 67 20 73 75
	   62 74 6F 74 61
	   6C 20 61 72 65
	   20 64 69 73 70
	   6C 61 79 65 64
	   2E 00

				;Variables used for program description
 000000A1 54 68 69 73 20	descripA	BYTE	"This program will prompt you for 10 signed integers, validating your input.",0dh, 0ah, 0
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 70 72
	   6F 6D 70 74 20
	   79 6F 75 20 66
	   6F 72 20 31 30
	   20 73 69 67 6E
	   65 64 20 69 6E
	   74 65 67 65 72
	   73 2C 20 76 61
	   6C 69 64 61 74
	   69 6E 67 20 79
	   6F 75 72 20 69
	   6E 70 75 74 2E
	   0D 0A 00
 000000EF 49 6E 74 65 67	descripB	BYTE	"Integers must be appropriately sized for a 32-bit register.",0dh, 0ah, 0
	   65 72 73 20 6D
	   75 73 74 20 62
	   65 20 61 70 70
	   72 6F 70 72 69
	   61 74 65 6C 79
	   20 73 69 7A 65
	   64 20 66 6F 72
	   20 61 20 33 32
	   2D 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 0D
	   0A 00
 0000012D 41 66 74 65 72	descripC	BYTE	"After valid input is received, a list of the entered numbers, their sum, and average will be displayed.",0
	   20 76 61 6C 69
	   64 20 69 6E 70
	   75 74 20 69 73
	   20 72 65 63 65
	   69 76 65 64 2C
	   20 61 20 6C 69
	   73 74 20 6F 66
	   20 74 68 65 20
	   65 6E 74 65 72
	   65 64 20 6E 75
	   6D 62 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 61 76 65
	   72 61 67 65 20
	   77 69 6C 6C 20
	   62 65 20 64 69
	   73 70 6C 61 79
	   65 64 2E 00

				;Variables for prompting for user input
 00000195 50 6C 65 61 73	plsEnter	BYTE	"Please enter a signed integer: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 3A
	   20 00
 000001B5 45 72 72 6F 72	tryAgain	BYTE	"Error! You didn't enter a signed int, or you overflowed the register.",0dh, 0ah
	   21 20 59 6F 75
	   20 64 69 64 6E
	   27 74 20 65 6E
	   74 65 72 20 61
	   20 73 69 67 6E
	   65 64 20 69 6E
	   74 2C 20 6F 72
	   20 79 6F 75 20
	   6F 76 65 72 66
	   6C 6F 77 65 64
	   20 74 68 65 20
	   72 65 67 69 73
	   74 65 72 2E 0D
	   0A
 000001FC  50 6C 65 61 73				BYTE	"Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00

				;Variables for storing user input
 0000020F  00000021 [		userInput	BYTE	33 DUP(0)
	    00
	   ]
 00000230 00000000		validInt	DWORD	?
 00000234 00000000		isNeg		DWORD	0
 00000238 2D			minus		BYTE	"-"
 00000239 2B			plus		BYTE	"+"
 0000023A  00000021 [		emptyStr	BYTE	33 DUP(0)
	    00
	   ]
 0000025B  0000000A [		intArray	SDWORD	10 DUP(?)
	    00000000
	   ]
 00000283 0000000A		arrayCount	DWORD	10

 00000000			.code
				;--------------------------------------
 00000000			main PROC
				;
				; Parses user input as a string to an int, prints sum and average
				; and validates input
				;
				; Preconditions: none
				; Postconditions: Input prompts, sum, average output to screen
				; Receives: none
				; Registers changed: esp
				; Registers changed (through called procs):
				; eax, ebx, ecx, edx, esi, edi, esp, ebp
				;
				; Returns: none
				;
				;--------------------------------------
				; Used for error detection
 00000000  6A 2F			push	47
				;--------------------------------------
				;INTRODUCTION SECTION
				;introduction
				;
				;This section of the program
				;introduces the programmer and
				;title.
				;--------------------------------------
					;Push string offsets in reverse order
					;as they are needed in introduction
 00000002  68 0000012D R		push	OFFSET descripC
 00000007  68 000000EF R		push	OFFSET descripB
 0000000C  68 000000A1 R		push	OFFSET descripA
 00000011  68 00000068 R		push	OFFSET ecOne
 00000016  68 0000001B R		push	OFFSET authName
 0000001B  68 00000000 R		push	OFFSET titleText

					;Introduce the program
 00000020  E8 00000053			call	introduction
 00000025  E8 00000000 E		call	CrLf

				;--------------------------------------
				;GET USER INPUT SECTION
				;getUserInput
				;
				;This section of the program gets 10
				;valid integers from the user.
				;--------------------------------------

					;Push user input offsets in the reverse
					;order that they are needed in the proc
 0000002A  68 00000283 R		push	OFFSET arrayCount
 0000002F  68 0000025B R		push	OFFSET intArray
 00000034  68 0000023A R		push	OFFSET emptyStr
 00000039  68 00000238 R		push	OFFSET minus
 0000003E  68 00000239 R		push	OFFSET plus
 00000043  68 00000234 R		push	OFFSET isNeg
 00000048  68 00000230 R		push	OFFSET validInt
 0000004D  68 0000020F R		push	OFFSET userInput
 00000052  68 000001B5 R		push	OFFSET tryAgain
 00000057  68 00000195 R		push	OFFSET plsEnter

					;Get 10 values
 0000005C  E8 00000188			call	getNumbers
 00000061  E8 00000000 E		call	CrLf

				;--------------------------------------
				;FAREWELL SECTION
				;farewell
				;
				;This section of the program bids farewell
				;to the user.
				;--------------------------------------
					;push string address and call
					;push	OFFSET seeya
					;call	farewell

					;Used for error detection
 00000066  58				pop		eax
 00000067  E8 00000000 E		call	WriteDec
 0000006C  E8 00000000 E		call	CrLf

					exit	; exit to operating system
 00000071  6A 00	   *	    push   +000000000h
 00000073  E8 00000000 E   *	    call   ExitProcess
 00000078			main ENDP

				; (insert additional procedures here)
				;--------------------------------------
 00000078			introduction PROC
				;
				; Introduces program title and name
				; of programmer, as well as extra credit
				; option and description.
				;
				; Preconditions: Title, author, EC string, description strings,
				; on stack
				; Postconditions: Introduction and related strings output to screen
				; Receives: Title, author, EC string, description strings,
				; on stack
				; Registers changed: eax, ecx, edx, ebp, esp, esi
				;
				; Returns: none
				;
				;--------------------------------------

					;Save ebp and set the base pointer
 00000078  55				push	ebp
 00000079  8B EC			mov		ebp, esp

				;--------------------------------------
				; CITATION: Concept learned from reference:
				; https://piazza.com/class/k83uhw9nnyd2y9?cid=278
				;--------------------------------------
				;; STACK FRAME CONTENTS
				; 
				;old ebp	|	ebp <-(Also esp)
				;return @	|	ebp + 4
				;titleText	|	ebp + 8
				;authName	|	ebp + 12
				;ecOne		|	ebp + 16
				;descripA	|	ebp + 20
				;descripB	|	ebp + 24
				;descripC	|	ebp + 28
				;--------------------------------------
					;Introduce title
 0000007B  8B 55 08			mov		edx, [ebp + 8]
 0000007E  E8 00000000 E		call	WriteString
 00000083  E8 00000000 E		call	CrLf

					;Introduce programmer
 00000088  8B 55 0C			mov		edx, [ebp + 12]
 0000008B  E8 00000000 E		call	WriteString
 00000090  E8 00000000 E		call	CrLf

					;Specify EC option
 00000095  8B 55 10			mov		edx, [ebp + 16]
 00000098  E8 00000000 E		call	WriteString
 0000009D  E8 00000000 E		call	CrLf

					;List program description
 000000A2  8B 55 14			mov		edx, [ebp + 20]
 000000A5  E8 00000000 E		call	WriteString
 000000AA  8B 55 18			mov		edx, [ebp + 24]
 000000AD  E8 00000000 E		call	WriteString
 000000B2  8B 55 1C			mov		edx, [ebp + 28]
 000000B5  E8 00000000 E		call	WriteString
 000000BA  E8 00000000 E		call	CrLf

					;Reset ebp -- esp never moved
 000000BF  5D				pop		ebp

					;Return but also clear stack
 000000C0  C2 0018			ret		24

 000000C3			introduction ENDP

				; (insert additional procedures here)
				;--------------------------------------
 000000C3			readVal PROC
				;
				; Gets and validates a signed integer from the user.
				;
				; Preconditions: userInput, validInt on stack
				; Postconditions: valid integer in validInt
				; Receives: userInput string on stack
				; Registers changed: eax, ecx, edx, ebp, esp, esi
				;
				; Returns: valid integer in validInt
				;
				;--------------------------------------

					;Save ebp and set the base pointer
 000000C3  55				push	ebp
 000000C4  8B EC			mov		ebp, esp

				;--------------------------------------
				; CITATION: Concept learned from reference:
				; https://piazza.com/class/k83uhw9nnyd2y9?cid=278
				;--------------------------------------
				;; STACK FRAME CONTENTS
				;
				;old ebp	|	ebp
				;return@	|	ebp + 4
				;ebpfrmCall	|	ebp + 8
				;ret@frmCall|	ebp + 12
				;plsEnter	|	ebp + 16 
				;tryAgain	|	ebp + 20
				;userInput	|	ebp + 24
				;validInt	|	ebp + 28
				;isNeg		|	ebp + 32
				;plus		|	ebp + 36
				;minus		|	ebp + 40
				;emptyStr	|	ebp + 44
				;intArray	|	ebp + 48
				;arrayCount	|	ebp + 52
				;--------------------------------------
					;Skip over invalid unless jumped to
 000000C6  EB 39			jmp		initRead

 000000C8			invalidEntry:	
					;Input was invalid
					;Clear the input string
					INVOKE	Str_copy, [ebp + 44], [ebp + 24]
 000000C8  FF 75 18	   *	    push   dword  ptr [ebp]+000000018h
 000000CB  FF 75 2C	   *	    push   dword  ptr [ebp]+00000002Ch
 000000CE  E8 00000000 E   *	    call   Str_copy

					;Initialize validInt, isNeg, clear direction
 000000D3  8B 7D 1C			mov		edi, [ebp + 28]
 000000D6  B8 00000000			mov		eax, 0
 000000DB  89 07			mov		[edi], eax
 000000DD  8B 7D 20			mov		edi, [ebp + 32]
 000000E0  89 07			mov		[edi], eax
 000000E2  FC				cld

					;Get input from user
					getString [ebp + 24], [ebp + 20]
 000000E3  60		     1		pushad
 000000E4  8B 55 14	     1		mov		edx, [ebp + 20]
 000000E7  E8 00000000 E     1		call	WriteString
 000000EC  8B 55 18	     1		mov		edx, [ebp + 24]
 000000EF  B9 00000020	     1		mov		ecx, 32; ensure always null-terminated
 000000F4  E8 00000000 E     1		call	ReadString
 000000F9  61		     1		popad
 000000FA  E8 00000000 E		call	CrLf

					;skip inital prompt
 000000FF  EB 2C			jmp		firstByte

 00000101			initRead:
					;Get input from user
					getString [ebp + 24], [ebp + 16]
 00000101  60		     1		pushad
 00000102  8B 55 10	     1		mov		edx, [ebp + 16]
 00000105  E8 00000000 E     1		call	WriteString
 0000010A  8B 55 18	     1		mov		edx, [ebp + 24]
 0000010D  B9 00000020	     1		mov		ecx, 32; ensure always null-terminated
 00000112  E8 00000000 E     1		call	ReadString
 00000117  61		     1		popad
 00000118  E8 00000000 E		call	CrLf
					
					;Initialize validInt, isNeg, clear direction
 0000011D  B8 00000000			mov		eax, 0
 00000122  8B 7D 1C			mov		edi, [ebp + 28]
 00000125  89 07			mov		[edi], eax
 00000127  8B 7D 20			mov		edi, [ebp + 32]
 0000012A  89 07			mov		[edi], eax
 0000012C  FC				cld

 0000012D			firstByte:
					;Set esi, direction, reinit isNeg
 0000012D  8B 75 18			mov		esi, [ebp + 24]
 00000130  B8 00000000			mov		eax, 0
 00000135  8B 7D 20			mov		edi, [ebp + 32]
 00000138  89 07			mov		[edi], eax

					;Get the first byte, zero-extend
 0000013A  AC				lodsb
 0000013B  0F B6 C0			movzx	eax, al

					;Check to see if it's a negative sign
 0000013E  83 F8 2D			cmp		eax, 45
 00000141  74 21			jz		negFound

					;Check to see if it's a positive sign
 00000143  83 F8 2B			cmp		eax, 43
 00000146  74 28			jz		posFound

					;No sign, checking this byte in range
 00000148  83 E8 30			sub		eax, 48
 0000014B  83 F8 00			cmp		eax, 0; lower than zero?
 0000014E  0F 82 FFFFFF74		jb		invalidEntry
 00000154  83 F8 09			cmp		eax, 9;greater than 9?
 00000157  0F 87 FFFFFF6B		ja		invalidEntry

					;Was a digit, proceeding
 0000015D  8B 7D 1C			mov		edi, [ebp + 28]
 00000160  01 07			add		[edi], eax
 00000162  EB 18			jmp		keepReading

 00000164			negFound:
					;set boolean and continue
 00000164  8B 7D 20			mov		edi, [ebp + 32]
 00000167  B8 00000001			mov		eax, 1
 0000016C  89 07			mov		[edi], eax
 0000016E  EB 0C			jmp		keepReading

 00000170			posFound:
					;set boolean and continue
 00000170  8B 7D 20			mov		edi, [ebp + 32]
 00000173  B8 00000000			mov		eax, 0
 00000178  89 07			mov		[edi], eax
 0000017A  EB 00			jmp		keepReading

 0000017C			keepReading:
					;Multiply to next dec place
 0000017C  BB 0000000A			mov		ebx, 10
 00000181  8B 7D 1C			mov		edi, [ebp + 28]
 00000184  8B 07			mov		eax, [edi]
 00000186  F7 E3			mul		ebx
 00000188  0F 82 FFFFFF3A		jc		invalidEntry
 0000018E  89 07			mov		[edi], eax

					;get the next byte, zero-extend
 00000190  AC				lodsb
 00000191  0F B6 C0			movzx	eax, al

					;Check if null char
 00000194  83 F8 00			cmp		eax, 0
 00000197  74 29			jz		endRead

					;checking this byte in range
 00000199  83 E8 30			sub		eax, 48
 0000019C  83 F8 00			cmp		eax, 0; lower than zero?
 0000019F  0F 82 FFFFFF23		jb		invalidEntry
 000001A5  83 F8 09			cmp		eax, 9;greater than 9?
 000001A8  0F 87 FFFFFF1A		ja		invalidEntry

					;Is a digit, adding to running total
 000001AE  8B 7D 1C			mov		edi, [ebp + 28]
 000001B1  8B 1F			mov		ebx, [edi]
 000001B3  03 C3			add		eax, ebx

					;check overflow
 000001B5  0F 82 FFFFFF0D		jc		invalidEntry
 000001BB  8B 7D 1C			mov		edi, [ebp + 28]
 000001BE  89 07			mov		[edi], eax

					;continue
 000001C0  EB BA			jmp		keepReading
					
 000001C2			endRead:
					;back off the last decimal escalation
 000001C2  BB 0000000A			mov		ebx, 10
 000001C7  8B 7D 1C			mov		edi, [ebp + 28]
 000001CA  8B 07			mov		eax, [edi]
 000001CC  F7 F3			div		ebx
 000001CE  89 07			mov		[edi], eax

					;Valid int is now saved in validInt
					;now we need to check sign

 000001D0  8B 7D 20			mov		edi, [ebp + 32]
 000001D3  B8 00000001			mov		eax, 1
 000001D8  39 07			cmp		[edi], eax
 000001DA  74 02			jz		complement
 000001DC  EB 09			jmp		endReadVal

 000001DE			complement:
					;get two's complement of validInt
 000001DE  8B 7D 1C			mov		edi, [ebp + 28]
 000001E1  8B 07			mov		eax, [edi]
 000001E3  F7 D8			neg		eax
 000001E5  89 07			mov		[edi], eax

 000001E7			endReadVal:
					;reset ebp, registers and leave stack for next proc
 000001E7  5D				pop		ebp
 000001E8  C3				ret
 000001E9			readVal ENDP

				;--------------------------------------
 000001E9			getNumbers PROC
				;
				; Stores 10 valid ints from the user

				; Preconditions: large stack, see stack contents below
				; Postconditions: valid integer in validInt
				; Receives: large stack, see stack contents below
				; Registers changed: eax, ebx, ecx, edx, ebp, esp, esi
				;
				; Returns: valid integers in intArray
				;
				;--------------------------------------

					;Save ebp and set the base pointer
 000001E9  55				push	ebp
 000001EA  8B EC			mov		ebp, esp

				;--------------------------------------
				; CITATION: Concept learned from reference:
				; https://piazza.com/class/k83uhw9nnyd2y9?cid=278
				;--------------------------------------
				;; STACK FRAME CONTENTS
				; 
				;old ebp	|	ebp <-(Also esp)
				;return @	|	ebp + 4
				;plsEnter	|	ebp + 8
				;tryAgain	|	ebp + 12
				;userInput	|	ebp + 16
				;validInt	|	ebp + 20
				;isNeg		|	ebp + 24
				;plus		|	ebp + 28
				;minus		|	ebp + 32
				;emptyStr	|	ebp + 36
				;intArray	|	ebp + 40
				;arrayCount	|	ebp + 44
				;--------------------------------------
					;initialize counter and edi
 000001EC  8B 5D 2C			mov		ebx, [ebp + 44]
 000001EF  B8 0000000A			mov		eax, 10
 000001F4  89 03			mov		[ebx], eax

 000001F6			getMore:
					;Get next value
 000001F6  E8 FFFFFEC8			call	readVal

					;get validInt
 000001FB  8B 75 14			mov		esi, [ebp + 20]

					;save to array and increment
					;subtract arrayCount from 10
 000001FE  B8 0000000A			mov		eax, 10
 00000203  8B 7D 2C			mov		edi, [ebp + 44]
 00000206  2B 07			sub		eax, [edi]
 00000208  BB 00000004			mov		ebx, 4

					;multiply by four
 0000020D  F7 E3			mul		ebx
 0000020F  8B 7D 28			mov		edi, [ebp + 40]

					;add this offset to edi
 00000212  03 F8			add		edi, eax
 00000214  8B 75 14			mov		esi, [ebp + 20]
 00000217  8B 06			mov		eax, [esi]

					;save valid int
 00000219  89 07			mov		[edi], eax

					;continue to fill array
 0000021B  8B 5D 2C			mov		ebx, [ebp + 44]
 0000021E  B8 00000001			mov		eax, 1
 00000223  29 03			sub		[ebx], eax; sub 1 from arrayCount
 00000225  B8 00000000			mov		eax, 0
 0000022A  39 03			cmp		[ebx], eax
 0000022C  75 C8			jnz		getMore

 0000022E  B9 0000000A			mov		ecx, 10
 00000233  8B 75 28			mov		esi, [ebp + 40]
 00000236			printEm:
					;Write the integers in array
 00000236  8B 06			mov		eax, [esi]
 00000238  E8 00000000 E		call	WriteInt
 0000023D  83 C6 04			add		esi, 4
 00000240  E8 00000000 E		call	CrLf
 00000245  E2 EF			loop	printEm

					;return ebp to initial value
 00000247  5D				pop		ebp

 00000248  C2 0028			ret 40
 0000024B			getNumbers ENDP

				; (insert additional procedures here)

				END main
Microsoft (R) Macro Assembler Version 14.24.28315.0	    06/04/20 21:55:19
7Strings to Signed Integers     (program6_933958778.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

getString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000287 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000024B Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getNumbers . . . . . . . . . . .	P Near	 000001E9 _TEXT	Length= 00000062 Public STDCALL
  getMore  . . . . . . . . . . .	L Near	 000001F6 _TEXT	
  printEm  . . . . . . . . . . .	L Near	 00000236 _TEXT	
introduction . . . . . . . . . .	P Near	 00000078 _TEXT	Length= 0000004B Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000078 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 000000C3 _TEXT	Length= 00000126 Public STDCALL
  invalidEntry . . . . . . . . .	L Near	 000000C8 _TEXT	
  initRead . . . . . . . . . . .	L Near	 00000101 _TEXT	
  firstByte  . . . . . . . . . .	L Near	 0000012D _TEXT	
  negFound . . . . . . . . . . .	L Near	 00000164 _TEXT	
  posFound . . . . . . . . . . .	L Near	 00000170 _TEXT	
  keepReading  . . . . . . . . .	L Near	 0000017C _TEXT	
  endRead  . . . . . . . . . . .	L Near	 000001C2 _TEXT	
  complement . . . . . . . . . .	L Near	 000001DE _TEXT	
  endReadVal . . . . . . . . . .	L Near	 000001E7 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayCount . . . . . . . . . . .	DWord	 00000283 _DATA	
authName . . . . . . . . . . . .	Byte	 0000001B _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
descripA . . . . . . . . . . . .	Byte	 000000A1 _DATA	
descripB . . . . . . . . . . . .	Byte	 000000EF _DATA	
descripC . . . . . . . . . . . .	Byte	 0000012D _DATA	
ecOne  . . . . . . . . . . . . .	Byte	 00000068 _DATA	
emptyStr . . . . . . . . . . . .	Byte	 0000023A _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intArray . . . . . . . . . . . .	DWord	 0000025B _DATA	
isNeg  . . . . . . . . . . . . .	DWord	 00000234 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
minus  . . . . . . . . . . . . .	Byte	 00000238 _DATA	
plsEnter . . . . . . . . . . . .	Byte	 00000195 _DATA	
plus . . . . . . . . . . . . . .	Byte	 00000239 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
seeya  . . . . . . . . . . . . .	Byte	 0000003B _DATA	
titleText  . . . . . . . . . . .	Byte	 00000000 _DATA	
tryAgain . . . . . . . . . . . .	Byte	 000001B5 _DATA	
userInput  . . . . . . . . . . .	Byte	 0000020F _DATA	
validInt . . . . . . . . . . . .	DWord	 00000230 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
