Microsoft (R) Macro Assembler Version 14.24.28315.0	    06/03/20 23:47:47
7Strings to Signed Integers     (program6_933958778.asm	     Page 1 - 1


				TITLE Strings to Signed Integers     (program6_933958778.asm)

				; Author: Andrew Helmsworth
				; Last Modified: 2020/06/01
				; OSU email address: helmswoa@oregonstate.edu
				; Course number/section: 271-400
				; Project Number: 6                Due Date: 2020/06/07
				; Description: Macros are defined which use Irvine Library 
				; procedures to read and write strings. These macros are used
				; by writeVal and readVal to get signed numbers from the user,
				; read it as a string, validate input, convert it to a signed integer
				; and store in an array. The sum and average are calculated and written
				; back as strings.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)
				;--------------------------------------
				getString MACRO inputAddress, prompt
				;   Prompts user to input an integer,
				;	then stores as a string.
				;
				;	Preconditions: Do not use any of the 
				;	general purpose registers as arguments
				;
				;	Receives: Address for saving input,
				;	address of a prompt for the user
				;
				;	Returns: A saved string at the input address
				;
				;
				;--------------------------------------

					;Save the registers
					pushad

					;Prompt for user input
					mov		edx, prompt
					call	WriteString

					;Get the input from the user
					mov		edx, inputAddress
					mov		ecx, 32; ensure always null-terminated
					call	ReadString

					;Restore the registers
					popad
				ENDM

				; (insert constant definitions here)

 00000000			.data

				; (insert variable definitions here)
				;Variables for introducing the programmer & farewell
 00000000 53 74 72 69 6E	titleText	BYTE	"Strings to Signed Integers",0
	   67 73 20 74 6F
	   20 53 69 67 6E
	   65 64 20 49 6E
	   74 65 67 65 72
	   73 00
 0000001B 50 72 6F 67 72	authName	BYTE	"Programmed by Andrew Helmsworth",0
	   61 6D 6D 65 64
	   20 62 79 20 41
	   6E 64 72 65 77
	   20 48 65 6C 6D
	   73 77 6F 72 74
	   68 00
 0000003B 54 68 61 6E 6B	seeya		BYTE	"Thanks for stopping by, and have a nice day!",0
	   73 20 66 6F 72
	   20 73 74 6F 70
	   70 69 6E 67 20
	   62 79 2C 20 61
	   6E 64 20 68 61
	   76 65 20 61 20
	   6E 69 63 65 20
	   64 61 79 21 00

				;Variables for explaining EC
 00000068 2A 2A 45 43 3A	ecOne		BYTE	"**EC: Line numbers and a running subtotal are displayed.",0
	   20 4C 69 6E 65
	   20 6E 75 6D 62
	   65 72 73 20 61
	   6E 64 20 61 20
	   72 75 6E 6E 69
	   6E 67 20 73 75
	   62 74 6F 74 61
	   6C 20 61 72 65
	   20 64 69 73 70
	   6C 61 79 65 64
	   2E 00

				;Variables used for program description
 000000A1 54 68 69 73 20	descripA	BYTE	"This program will prompt you for 10 signed integers, validating your input.",0dh, 0ah, 0
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 70 72
	   6F 6D 70 74 20
	   79 6F 75 20 66
	   6F 72 20 31 30
	   20 73 69 67 6E
	   65 64 20 69 6E
	   74 65 67 65 72
	   73 2C 20 76 61
	   6C 69 64 61 74
	   69 6E 67 20 79
	   6F 75 72 20 69
	   6E 70 75 74 2E
	   0D 0A 00
 000000EF 49 6E 74 65 67	descripB	BYTE	"Integers must be appropriately sized for a 32-bit register.",0dh, 0ah, 0
	   65 72 73 20 6D
	   75 73 74 20 62
	   65 20 61 70 70
	   72 6F 70 72 69
	   61 74 65 6C 79
	   20 73 69 7A 65
	   64 20 66 6F 72
	   20 61 20 33 32
	   2D 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 0D
	   0A 00
 0000012D 41 66 74 65 72	descripC	BYTE	"After valid input is received, a list of the entered numbers, their sum, and average will be displayed.",0
	   20 76 61 6C 69
	   64 20 69 6E 70
	   75 74 20 69 73
	   20 72 65 63 65
	   69 76 65 64 2C
	   20 61 20 6C 69
	   73 74 20 6F 66
	   20 74 68 65 20
	   65 6E 74 65 72
	   65 64 20 6E 75
	   6D 62 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 61 76 65
	   72 61 67 65 20
	   77 69 6C 6C 20
	   62 65 20 64 69
	   73 70 6C 61 79
	   65 64 2E 00

				;Variables for prompting for user input
 00000195 50 6C 65 61 73	plsEnter	BYTE	"Please enter a signed integer: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 3A
	   20 00
 000001B5 50 6C 65 61 73	tryAgain	BYTE	"Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00

				;Variables for storing user input
 000001C8  00000021 [		userInput	BYTE	33 DUP(0)
	    00
	   ]
 000001E9 00000000		validInt	DWORD	?
 000001ED 00000000		isNeg		DWORD	0
 000001F1 2D			minus		BYTE	"-"
 000001F2 2B			plus		BYTE	"+"
 000001F3  00000021 [		emptyStr	BYTE	33 DUP(0)
	    00
	   ]

 00000000			.code
				;--------------------------------------
 00000000			main PROC
				;
				; Parses user input as a string to an int, prints sum and average
				; and validates input
				;
				; Preconditions: none
				; Postconditions: Input prompts, sum, average output to screen
				; Receives: none
				; Registers changed: esp
				; Registers changed (through called procs):
				; eax, ebx, ecx, edx, esi, edi, esp, ebp
				;
				; Returns: none
				;
				;--------------------------------------
				; Used for error detection
 00000000  6A 2F			push	47
				;--------------------------------------
				;INTRODUCTION SECTION
				;introduction
				;
				;This section of the program
				;introduces the programmer and
				;title.
				;--------------------------------------
					;Push string offsets in reverse order
					;as they are needed in introduction
 00000002  68 0000012D R		push	OFFSET descripC
 00000007  68 000000EF R		push	OFFSET descripB
 0000000C  68 000000A1 R		push	OFFSET descripA
 00000011  68 00000068 R		push	OFFSET ecOne
 00000016  68 0000001B R		push	OFFSET authName
 0000001B  68 00000000 R		push	OFFSET titleText

					;Introduce the program
 00000020  E8 00000049			call	introduction
 00000025  E8 00000000 E		call	CrLf

				;--------------------------------------
				;GET USER INPUT SECTION
				;getUserInput
				;
				;This section of the program gets 10
				;valid integers from the user.
				;--------------------------------------

					;Push user input offsets in the reverse
					;order that they are needed in the proc
 0000002A  68 000001F3 R		push	OFFSET emptyStr
 0000002F  68 000001F1 R		push	OFFSET minus
 00000034  68 000001F2 R		push	OFFSET plus
 00000039  68 000001ED R		push	OFFSET isNeg
 0000003E  68 000001E9 R		push	OFFSET validInt
 00000043  68 000001C8 R		push	OFFSET userInput
 00000048  68 000001B5 R		push	OFFSET tryAgain
 0000004D  68 00000195 R		push	OFFSET plsEnter

					;Get a value
 00000052  E8 00000062			call	readVal
					;call	CrLf
 00000057  B8 000001E9 R		mov		eax, OFFSET validInt
 0000005C  E8 00000000 E		call	WriteInt

				;--------------------------------------
				;FAREWELL SECTION
				;farewell
				;
				;This section of the program bids farewell
				;to the user.
				;--------------------------------------
					;push string address and call
					;push	OFFSET seeya
					;call	farewell

					;Used for error detection
 00000061  58				pop		eax
					;call	WriteDec
 00000062  E8 00000000 E		call	CrLf

					exit	; exit to operating system
 00000067  6A 00	   *	    push   +000000000h
 00000069  E8 00000000 E   *	    call   ExitProcess
 0000006E			main ENDP

				; (insert additional procedures here)
				;--------------------------------------
 0000006E			introduction PROC
				;
				; Introduces program title and name
				; of programmer, as well as extra credit
				; option and description.
				;
				; Preconditions: Title, author, EC string, description strings,
				; on stack
				; Postconditions: Introduction and related strings output to screen
				; Receives: Title, author, EC string, description strings,
				; on stack
				; Registers changed: eax, ecx, edx, ebp, esp, esi
				;
				; Returns: none
				;
				;--------------------------------------

					;Save ebp and set the base pointer
 0000006E  55				push	ebp
 0000006F  8B EC			mov		ebp, esp

				;--------------------------------------
				; CITATION: Concept learned from reference:
				; https://piazza.com/class/k83uhw9nnyd2y9?cid=278
				;--------------------------------------
				;; STACK FRAME CONTENTS
				; 
				;old ebp	|	ebp <-(Also esp)
				;return @	|	ebp + 4
				;titleText	|	ebp + 8
				;authName	|	ebp + 12
				;ecOne		|	ebp + 16
				;descripA	|	ebp + 20
				;descripB	|	ebp + 24
				;descripC	|	ebp + 28
				;--------------------------------------
					;Introduce title
 00000071  8B 55 08			mov		edx, [ebp + 8]
 00000074  E8 00000000 E		call	WriteString
 00000079  E8 00000000 E		call	CrLf

					;Introduce programmer
 0000007E  8B 55 0C			mov		edx, [ebp + 12]
 00000081  E8 00000000 E		call	WriteString
 00000086  E8 00000000 E		call	CrLf

					;Specify EC option
 0000008B  8B 55 10			mov		edx, [ebp + 16]
 0000008E  E8 00000000 E		call	WriteString
 00000093  E8 00000000 E		call	CrLf

					;List program description
 00000098  8B 55 14			mov		edx, [ebp + 20]
 0000009B  E8 00000000 E		call	WriteString
 000000A0  8B 55 18			mov		edx, [ebp + 24]
 000000A3  E8 00000000 E		call	WriteString
 000000A8  8B 55 1C			mov		edx, [ebp + 28]
 000000AB  E8 00000000 E		call	WriteString
 000000B0  E8 00000000 E		call	CrLf

					;Reset ebp -- esp never moved
 000000B5  5D				pop		ebp

					;Return but also clear stack
 000000B6  C2 0018			ret		24

 000000B9			introduction ENDP

				; (insert additional procedures here)
				;--------------------------------------
 000000B9			readVal PROC
				;
				; Gets and validates a signed integer from the user.
				;
				; Preconditions: userInput, validInt on stack
				; Postconditions: valid integer in validInt
				; Receives: userInput string on stack
				; Registers changed: eax, ecx, edx, ebp, esp, esi
				;
				; Returns: valid integer in validInt
				;
				;--------------------------------------

					;Save ebp and set the base pointer
 000000B9  55				push	ebp
 000000BA  8B EC			mov		ebp, esp

				;--------------------------------------
				; CITATION: Concept learned from reference:
				; https://piazza.com/class/k83uhw9nnyd2y9?cid=278
				;--------------------------------------
				;; STACK FRAME CONTENTS
				; 
				;old ebp	|	ebp <-(Also esp)
				;return @	|	ebp + 4
				;plsEnter	|	ebp + 8
				;tryAgain	|	ebp + 12
				;userInput	|	ebp + 16
				;validInt	|	ebp + 20
				;isNeg		|	ebp + 24
				;plus		|	ebp + 28
				;minus		|	ebp + 32
				;emptyStr	|	ebp + 36
				;--------------------------------------
					;Skip over invalid unless jumped to
 000000BC  EB 38			jmp		initRead

 000000BE			invalidEntry:	
					;Input was invalid
					;Clear the input string
					INVOKE	Str_copy, [ebp + 36], [ebp + 16]
 000000BE  FF 75 10	   *	    push   dword  ptr [ebp]+000000010h
 000000C1  FF 75 24	   *	    push   dword  ptr [ebp]+000000024h
 000000C4  E8 00000000 E   *	    call   Str_copy

					;Initialize validInt, isNeg, clear direction
 000000C9  C7 45 14			mov		DWORD PTR [ebp + 20], 0
	   00000000
 000000D0  C7 45 18			mov		DWORD PTR [ebp + 24], 0
	   00000000
 000000D7  FC				cld

					;Get input from user
					getString [ebp + 16], [ebp + 12]
 000000D8  60		     1		pushad
 000000D9  8B 55 0C	     1		mov		edx, [ebp + 12]
 000000DC  E8 00000000 E     1		call	WriteString
 000000E1  8B 55 10	     1		mov		edx, [ebp + 16]
 000000E4  B9 00000020	     1		mov		ecx, 32; ensure always null-terminated
 000000E9  E8 00000000 E     1		call	ReadString
 000000EE  61		     1		popad
 000000EF  E8 00000000 E		call	CrLf

					;skip inital prompt
 000000F4  EB 2B			jmp		firstByte

 000000F6			initRead:
					;Get input from user
					getString [ebp + 16], [ebp + 8]
 000000F6  60		     1		pushad
 000000F7  8B 55 08	     1		mov		edx, [ebp + 8]
 000000FA  E8 00000000 E     1		call	WriteString
 000000FF  8B 55 10	     1		mov		edx, [ebp + 16]
 00000102  B9 00000020	     1		mov		ecx, 32; ensure always null-terminated
 00000107  E8 00000000 E     1		call	ReadString
 0000010C  61		     1		popad
 0000010D  E8 00000000 E		call	CrLf
					
					;Initialize validInt, isNeg, clear direction
 00000112  C7 45 14			mov		DWORD PTR [ebp + 20], 0
	   00000000
 00000119  C7 45 18			mov		DWORD PTR [ebp + 24], 0
	   00000000
 00000120  FC				cld

 00000121			firstByte:
					;Set esi, direction, reinit isNeg
 00000121  8B 75 10			mov		esi, [ebp + 16]
 00000124  C7 45 18			mov		DWORD PTR[ebp + 24], 0
	   00000000

					;Get the first byte, zero-extend
 0000012B  AC				lodsb
 0000012C  0F B6 C0			movzx	eax, al

					;Check to see if it's a negative sign
 0000012F  83 F8 2D			cmp		eax, 45
 00000132  74 1F			jz		negFound

					;Check to see if it's a positive sign
 00000134  83 F8 2B			cmp		eax, 43
 00000137  74 23			jz		posFound

					;No sign, checking this byte in range
 00000139  83 E8 30			sub		eax, 48
 0000013C  83 F8 00			cmp		eax, 0; lower than zero?
 0000013F  0F 82 FFFFFF79		jb		invalidEntry
 00000145  83 F8 09			cmp		eax, 9;greater than 9?
 00000148  0F 87 FFFFFF70		ja		invalidEntry

					;Was a digit, proceeding
 0000014E  01 45 14			add		[ebp + 20], eax
 00000151  EB 12			jmp		keepReading

 00000153			negFound:
					;set boolean and continue
 00000153  C7 45 18			mov		DWORD PTR [ebp + 24], 1
	   00000001
 0000015A  EB 09			jmp		keepReading

 0000015C			posFound:
					;set boolean and continue
 0000015C  C7 45 18			mov		DWORD PTR [ebp + 24], 0
	   00000000
 00000163  EB 00			jmp		keepReading

 00000165			keepReading:
					;Multiply to next dec place
 00000165  BB 0000000A			mov		ebx, 10
 0000016A  8B 45 14			mov		eax, [ebp + 20]
 0000016D  F7 E3			mul		ebx
 0000016F  89 45 14			mov		[ebp + 20], eax

					;get the next byte, zero-extend
 00000172  AC				lodsb
 00000173  0F B6 C0			movzx	eax, al

					;Check if null char
 00000176  83 F8 00			cmp		eax, 0
 00000179  74 1F			jz		endRead

					;checking this byte in range
 0000017B  83 E8 30			sub		eax, 48
 0000017E  83 F8 00			cmp		eax, 0; lower than zero?
 00000181  0F 82 FFFFFF37		jb		invalidEntry
 00000187  83 F8 09			cmp		eax, 9;greater than 9?
 0000018A  0F 87 FFFFFF2E		ja		invalidEntry

					;Is a digit, adding to running total
 00000190  8B 5D 14			mov		ebx, [ebp + 20]
 00000193  03 C3			add		eax, ebx
 00000195  89 45 14			mov		[ebp + 20], eax

					;continue
 00000198  EB CB			jmp		keepReading
					
 0000019A			endRead:
					;back off the last decimal escalation
 0000019A  BB 0000000A			mov		ebx, 10
 0000019F  8B 45 14			mov		eax, [ebp + 20]
 000001A2  F7 F3			div		ebx
 000001A4  89 45 14			mov		[ebp + 20], eax

					;Valid int is now saved in validInt

					;reset ebp and clear stack
 000001A7  5D				pop		ebp

 000001A8  C2 0020			ret 32
 000001AB			readVal	 ENDP



				; (insert additional procedures here)

				END main
Microsoft (R) Macro Assembler Version 14.24.28315.0	    06/03/20 23:47:47
7Strings to Signed Integers     (program6_933958778.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

getString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000214 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001AB Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
introduction . . . . . . . . . .	P Near	 0000006E _TEXT	Length= 0000004B Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000006E Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 000000B9 _TEXT	Length= 000000F2 Public STDCALL
  invalidEntry . . . . . . . . .	L Near	 000000BE _TEXT	
  initRead . . . . . . . . . . .	L Near	 000000F6 _TEXT	
  firstByte  . . . . . . . . . .	L Near	 00000121 _TEXT	
  negFound . . . . . . . . . . .	L Near	 00000153 _TEXT	
  posFound . . . . . . . . . . .	L Near	 0000015C _TEXT	
  keepReading  . . . . . . . . .	L Near	 00000165 _TEXT	
  endRead  . . . . . . . . . . .	L Near	 0000019A _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
authName . . . . . . . . . . . .	Byte	 0000001B _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
descripA . . . . . . . . . . . .	Byte	 000000A1 _DATA	
descripB . . . . . . . . . . . .	Byte	 000000EF _DATA	
descripC . . . . . . . . . . . .	Byte	 0000012D _DATA	
ecOne  . . . . . . . . . . . . .	Byte	 00000068 _DATA	
emptyStr . . . . . . . . . . . .	Byte	 000001F3 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
isNeg  . . . . . . . . . . . . .	DWord	 000001ED _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
minus  . . . . . . . . . . . . .	Byte	 000001F1 _DATA	
plsEnter . . . . . . . . . . . .	Byte	 00000195 _DATA	
plus . . . . . . . . . . . . . .	Byte	 000001F2 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
seeya  . . . . . . . . . . . . .	Byte	 0000003B _DATA	
titleText  . . . . . . . . . . .	Byte	 00000000 _DATA	
tryAgain . . . . . . . . . . . .	Byte	 000001B5 _DATA	
userInput  . . . . . . . . . . .	Byte	 000001C8 _DATA	
validInt . . . . . . . . . . . .	DWord	 000001E9 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
